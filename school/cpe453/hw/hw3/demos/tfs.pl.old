#!/usr/bin/perl

use Cwd;

$libdir = $ENV{"lib"};
if ( $libdir eq "" ) {
    $libdir="/home/pnico/CalPoly/Class/cpe453/now/Asgn/Handin/lib/Asgn4";
}
$username = $ENV{"name"};
if ( $username eq "" ) {
    $username = "Submitted";
}

$refdir = $ENV{"REFDIR"};

$nospaces=0;

$imagedir = $ENV{"IMAGEDIR"};
if ( $imagedir eq "" ) {
    $imagedir = "Images";
}

$expdir = $ENV{"EXPDIR"};
if ( $expdir eq "" ) {
    $expdir = "$libdir/Tests/Expected";
}

%submitted = ( 
	       "minls"    => "./minls",
	       "minget"   => "./minget",
	       );

%reference = ( 
	"minls" => 
	"$refdir/minls",
	"minget"   => 
	"$refdir/minget",
	       );

$maxlines = 10;
$maxchars = 2048;
$iolimit  = " iolimit $maxlines $maxchars ";
$timeout  = 5;
$sfile = "script.$$";

#Each test consists of:
#             a name,  cmd, arguments, diffargs, shouldfail, quiet
@tests = (
#--------------------------------------------------------------
[ "Usage test",                            "minls",  "-h",                                                                        "", 1,  0 ],
[ "unparitioned, blank",                   "minls",  "$imagedir/BlankDisk",                                                   "-bBw", 0,  0 ],
[ "unpartitioned, files",                  "minls",  "$imagedir/TestImage",                                                   "-bBw", 0,  0 ],
[ "unpartitioned, bad superblock",         "minls",  "$imagedir/RandomDisk",                                                  "-bBw", 1,  0 ],
[ "partitioned, part 0",                   "minls",  "-p 0 $imagedir/Partitioned",                                            "-bBw", 0,  0 ],
[ "partitioned, part 1",                   "minls",  "-p 1 $imagedir/Partitioned",                                            "-bBw", 0,  0 ],
[ "partitioned, part 2",                   "minls",  "-p 2 $imagedir/Partitioned",                                            "-bBw", 0,  0 ],
[ "partitioned, part 3",                   "minls",  "-p 3 $imagedir/Partitioned",                                            "-bBw", 0,  0 ],
[ "partitioned, bad part",                 "minls",  "-p 5 $imagedir/Partitioned",                                            "-bBw", 1,  0 ],
[ "partitioned, no part",                  "minls",  "$imagedir/Partitioned",                                                 "-bBw", 1,  0 ],
[ "partitioned, not minix",                "minls",  "-p 1 $imagedir/HardDisk",                                               "-bBw", 1,  0 ],
[ "subpart., good sub",                    "minls",  "-p 0 -s 0 $imagedir/HardDisk",                                          "-bBw", 0,  0 ],
[ "subpart., bad sub",                     "minls",  "-p 0 -s 1 $imagedir/HardDisk",                                          "-bBw", 1,  0 ],
#--------------------------------------------------------------
[ "unpartitioned, w/filename",             "minls",  "$imagedir/TestImage /Hello",                                            "-bBw", 0,  0 ],
[ "partitioned, w/filename, p0",           "minls",  "-p 0 $imagedir/Partitioned /Message",                                   "-bBw", 0,  0 ],
[ "partitioned, w/filename, p1",           "minls",  "-p 1 $imagedir/Partitioned /Message",                                   "-bBw", 0,  0 ],
[ "partitioned, w/filename, p2",           "minls",  "-p 2 $imagedir/Partitioned /Message",                                   "-bBw", 0,  0 ],
[ "partitioned, w/filename, p3",           "minls",  "-p 3 $imagedir/Partitioned /Message",                                   "-bBw", 0,  0 ],
[ "subpart., no filename s0",              "minls",  "-p 0 -s 0 $imagedir/HardDisk",                                          "-bBw", 0,  0 ],
[ "subpart., no filename s2",              "minls",  "-p 0 -s 2 $imagedir/HardDisk",                                          "-bBw", 0,  0 ],
[ "subpart., w/filename",                  "minls",  "-p 0 -s 2 $imagedir/HardDisk /home/pnico/Message",                      "-bBw", 0,  0 ],
[ "subpart., w/bad filename",              "minls",  "-p 0 -s 0 $imagedir/HardDisk /home/pnico/Message",                      "-bBw", 1,  0 ],

#--------------directories and files of various depths-------------------------
[ "directories",                           "minls",  "$imagedir/Files /Files",                                                "-bBw", 0,  0 ],
[ "directories",                           "minls",  "$imagedir/Files /Files/0000_Zones",                                     "-bBw", 0,  0 ],
[ "directories",                           "minls",  "$imagedir/Files /Files/0000_Zone",                                      "-bBw", 0,  0 ],
[ "directories",                           "minls",  "$imagedir/Files /Files/0007_Zones",                                     "-bBw", 0,  0 ],
[ "directories",                           "minls",  "$imagedir/Files /Files/0010_Zones",                                     "-bBw", 0,  0 ],
[ "directories",                           "minls",  "$imagedir/Files /Files/1032_Zones",                                     "-bBw", 0,  0 ],
[ "directories",                           "minls",  "$imagedir/Files /DeepPaths/a/b/c/d/e/i/j/k/Files",                      "-bBw", 0,  0 ],
[ "directories",                           "minls",  "$imagedir/Files /DeepPaths/a/b/c/d/e/i/j/k/Files/Message",              "-bBw", 0,  0 ],
#--------------ignoring deleted files--------------------------------
[ "directories-deleted",                   "minls",  "$imagedir/Files /Deleted",                                              "-bBw", 0,  0 ],
[ "directories-ok file",                   "minls",  "$imagedir/Files /Deleted/File-10",                                      "-bBw", 0,  0 ],
[ "directories-deleted file",              "minls",  "$imagedir/Files /Deleted/File-05",                                      "-bBw", 1,  0 ],
#--------------non-4096k blocks---------------------------------------
[ "1k blocks. dir.",                       "minls",  "$imagedir/SmallBlocks--1k",                                             "-bBw", 0,  0 ],
[ "1k blocks. file.",                       "minls",  "$imagedir/SmallBlocks--1k DirTwo/FileTwo ",                            "-bBw", 0,  0 ],

#--------------non-blocksize zones------------------------------------
[ "16k zones. dir.",                       "minls",  "$imagedir/BigZones-16k",                                                "-bBw", 0,  0 ],
[ "16k zones. file.",                      "minls",  "$imagedir/BigZones-16k /DirOne/FileTwo",                                "-bBw", 0,  0 ],
[ "64k zones. dir",                        "minls",  "$imagedir/ReallyBigZones-64k",                                          "-bBw", 0,  0 ],
[ "64k zones. file",                       "minls",  "$imagedir/ReallyBigZones-64k DirTwo/FileOne",                           "-bBw", 0,  0 ],
[ "64k zones. longpath",                   "minls",  "$imagedir/ReallyBigZones-64k /./.././../DirTwo/FileOne",                "-bBw", 0,  0 ],

#--------------Permissions------------------------------------
[ "Permissions 777",                      "minls", "$imagedir/Files /Permissions/777",                         	             "-bBw", 0,  0 ],
[ "Permissions 755",                      "minls", "$imagedir/Files /Permissions/755",                         	             "-bBw", 0,  0 ],
[ "Permissions 753",                      "minls", "$imagedir/Files /Permissions/753",                         	             "-bBw", 0,  0 ],
[ "Permissions 357",                      "minls", "$imagedir/Files /Permissions/357",                         	             "-bBw", 0,  0 ],
[ "Permissions 000",                      "minls", "$imagedir/Files /Permissions/000",                                       "-bBw", 0,  0 ],

#===========================now minget=================================
[ "unpartitioned, w/filename",             "minget", "$imagedir/TestImage /Hello",                                            "-bBw", 0,  0 ],
[ "partitioned, w/filename, p0",           "minget", "-p 0 $imagedir/Partitioned /Message",                                   "-bBw", 0,  0 ],
[ "partitioned, w/filename, p1",           "minget", "-p 1 $imagedir/Partitioned /Message",                                   "-bBw", 0,  0 ],
[ "partitioned, w/filename, p2",           "minget", "-p 2 $imagedir/Partitioned /Message",                                   "-bBw", 0,  0 ],
[ "partitioned, w/filename, p3",           "minget", "-p 3 $imagedir/Partitioned /Message",                                   "-bBw", 0,  0 ],
[ "subpart., no filename s0",              "minget", "-p 0 -s 0 $imagedir/HardDisk",                                          "-bBw", 1,  0 ],
[ "subpart., no filename s2",              "minget", "-p 0 -s 2 $imagedir/HardDisk",                                          "-bBw", 1,  0 ],
[ "subpart., w/filename",                  "minget", "-p 0 -s 2 $imagedir/HardDisk /home/pnico/Message",                      "-bBw", 0,  0 ],
[ "subpart., w/bad filename",              "minget", "-p 0 -s 0 $imagedir/HardDisk /home/pnico/Message",                      "-bBw", 1,  0 ],
[ "unpartitioned, w/filename",             "minget", "$imagedir/TestImage /Hello /dev/stdout",                                "-bBw", 0,  0 ],
[ "partitioned, w/filename, p0",           "minget", "-p 0 $imagedir/Partitioned /Message /dev/stdout",                       "-bBw", 0,  0 ],
[ "partitioned, w/filename, p1",           "minget", "-p 1 $imagedir/Partitioned /Message /dev/stdout",                       "-bBw", 0,  0 ],
[ "partitioned, w/filename, p2",           "minget", "-p 2 $imagedir/Partitioned /Message /dev/stdout",                       "-bBw", 0,  0 ],
[ "partitioned, w/filename, p3",           "minget", "-p 3 $imagedir/Partitioned /Message /dev/stdout",                       "-bBw", 0,  0 ],
[ "subpart., no filename s0",              "minget", "-p 0 -s 0 $imagedir/HardDisk /dev/stdout",                              "-bBw", 1,  0 ],
[ "subpart., no filename s2",              "minget", "-p 0 -s 2 $imagedir/HardDisk /dev/stdout",                              "-bBw", 1,  0 ],
[ "subpart., w/filename",                  "minget", "-p 0 -s 2 $imagedir/HardDisk /home/pnico/Message /dev/stdout",          "-bBw", 0,  0 ],
[ "subpart., w/bad filename",              "minget", "-p 0 -s 0 $imagedir/HardDisk /home/pnico/Message /dev/stdout",          "-bBw", 1,  0 ],

#--------------directories and files of various depths-------------------------
[ "directories",                           "minget", "$imagedir/Files /Files",                                                "-bBw", 1,  0 ],
[ "directories",                           "minget", "$imagedir/Files /DeepPaths/Distraction",                                "-bBw", 1,  0 ],
[ "directories",                           "minget", "$imagedir/Files /DeepPaths/a/b/c/d/e/i/j/k/Files",                      "-bBw", 1,  0 ],
[ "directories",                           "minget", "$imagedir/Files /DeepPaths/a/b/c/d/e/i/j/k/Files/Message",              "-bBw", 0,  0 ],
[ "directories",                           "minget", "$imagedir/Files /Files /dev/stdout",                                    "-bBw", 1,  0 ],
[ "directories",                           "minget", "$imagedir/Files /DeepPaths/Distraction /dev/stdout",                    "-bBw", 1,  0 ],
[ "directories",                           "minget", "$imagedir/Files /DeepPaths/a/b/c/d/e/i/j/k/Files /dev/stdout",          "-bBw", 1,  0 ],
[ "directories",                           "minget", "$imagedir/Files /DeepPaths/a/b/c/d/e/i/j/k/Files/Message /dev/stdout",  "-bBw", 0,  0 ],
#--------------ignoring deleted files--------------------------------
[ "directories-deleted",                   "minget", "$imagedir/Files /Deleted",                                              "-bBw", 1,  0 ],
[ "directories-ok file",                   "minget", "$imagedir/Files /Deleted/File-10",                                      "-bBw", 0,  0 ],
[ "directories-deleted file",              "minget", "$imagedir/Files /Deleted/File-05",                                      "-bBw", 1,  0 ],
[ "directories-deleted",                   "minget", "$imagedir/Files /Deleted /dev/stdout",                                  "-bBw", 1,  0 ],
[ "directories-ok file",                   "minget", "$imagedir/Files /Deleted/File-10 /dev/stdout",                          "-bBw", 0,  0 ],
[ "directories-deleted file",              "minget", "$imagedir/Files /Deleted/File-05 /dev/stdout",                          "-bBw", 1,  0 ],
#--------------non-4096k blocks---------------------------------------
[ "1k blocks. dir.",                       "minls",  "$imagedir/SmallBlocks--1k",                                             "-bBw", 0,  0 ],
[ "1k blocks. file.",                      "minls",  "$imagedir/SmallBlocks--1k DirTwo/FileTwo ",                             "-bBw", 0,  0 ],

#--------------non-blocksize zones------------------------------------
[ "16k zones. dir.",                       "minls",  "$imagedir/BigZones-16k",                                                "-bBw", 0,  0 ],
[ "16k zones. file.",                      "minls",  "$imagedir/BigZones-16k /DirOne/FileTwo",                                "-bBw", 0,  0 ],
[ "64k zones. dir",                        "minls",  "$imagedir/ReallyBigZones-64k",                                          "-bBw", 0,  0 ],
[ "64k zones. file",                       "minls",  "$imagedir/ReallyBigZones-64k DirTwo/FileOne",                           "-bBw", 0,  0 ],
[ "64k zones. longpath",                   "minls",  "$imagedir/ReallyBigZones-64k /./.././../DirTwo/FileOne",                "-bBw", 0,  0 ],

#--------------files of various sizes--------------------------------
[ "Files size tests",                      "minget", "$imagedir/Files /Files/0000_Zones",                                      "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/0000_Zone",                                       "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/0007_Zones",                                      "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/0010_Zones",                                      "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/1032_Zones",                                      "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/0000_Zones /dev/stdout",                          "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/0000_Zone /dev/stdout",                           "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/0007_Zones /dev/stdout",                          "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/0010_Zones /dev/stdout",                          "-bBw", 0,  1 ],
[ "Files size tests",                      "minget", "$imagedir/Files /Files/1032_Zones /dev/stdout",                          "-bBw", 0,  1 ],
#--------------files with holes--------------------------------------
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/nohole         /dev/stdout",                     "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/direct         /dev/stdout",                     "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/into-indirect  /dev/stdout",                     "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/whole-indirect /dev/stdout",                     "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/double         /dev/stdout",                     "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/nohole",                                         "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/direct",                                         "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/into-indirect",                                  "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/whole-indirect",                                 "-bBw", 0,  1 ],
[ "Reading files with holes",              "minget", "$imagedir/Files /Holes/double",                                         "-bBw", 0,  1 ],

#[ "",                           ""      ,  ""                         , 0 ],
#	  [ "", 	"", "" ,],
#	  [ "", 	"", "" ],
#	  [ "", 	"", "" ],
#	  [ "", 	"", "" ],
);


$logfile   = "logminfs.$$";
$difffile  = "diffminfs.$$";
$testfile  = "testminfs.$$";
$errors    = 0;
#$format = "   %-28s %-6s %-40s %4s\n";
#$format = "   %s\n      %-28s %-6s %-40s\n";
$format = "%-59s %8s\n       Cmd: %s %-40s \n";

$line="=======================================================================";
printf("   $line\n  ");
printf($format,"Test","Status","Prog","Arguments");
printf("   $line\n");
$errors += dotests(@tests);
printf("   $line\n");

$total=scalar(@tests);
$passed=$total-$errors;

if ( $errors == 0 ) {
    printf("Success. (%d/%d passed)\n",$passed,$total);
} else {
    printf("Failure. (%d/%d passed)\n",$passed,$total);
}

printf("\n");
printf("Actual ouput from tests and detailed results are below.\n");
printf("\n");
system("cat $logfile");
unlink($logfile);

exit $errors;


sub dotests {
    local(@testarray) = @_;
    local($errors) = 0;
    $testnum=1;
    foreach $t ( @testarray ) {
	($name,$cmd,$args,$diffargs,$shouldfail,$quiet) = (@$t);
	if ( $nospaces ) {
	    # remove spaces between -p, -s, and the number
	    $_ = $args;
	    s/-p\s+(\d+)/-p$1/g;
	    s/-s\s+(\d+)/-s$1/g;
	    $args = $_;
	}
	unlink($testfile);
	unlink($difffile);
	open  (OUT,">> $logfile");
	print OUT "\n\n-----------------\n$testnum) $name:\n     $cmd " .
	          "$args \n-----------------\n";
	close (OUT);

	if ( ! -x $submitted{$cmd} ) {
	    open  (OUT,">> $logfile");
	    print OUT "Unable to locate $submitted{$cmd}\n";
	    close (OUT);
	    $failed = 1;
	} else {
	    $command="timelimit $timeout " . $submitted{$cmd} . " $args ";

	    $chatter = 0;
	    if ( $chatter ) {
	    	print "\n\n";
	    	print "CL: '$cl'\n";
	    	print "\n\n";
	    }

	    # Sadly I can't use script here, because it hides the exit status
	    $usescript = 0;
	    if ( $usescript ) {
		$cl = "script -q -c \"$command\" $sfile >& /dev/null";
		$status = system($cl);
		system ("tail -n +2 $sfile | tr -d '\r'  > $testfile");
		unlink($sfile);
	    } else {
		$status = system("$command >& $testfile");
	    }

	    $failed = 0;

	    open  (OUT,">> $logfile");
	    print OUT "Test program output:\n";
	    close (OUT);
	    if ( ! $quiet ) {
		system("cat -v $testfile >> $logfile");
	    } else {
		open  (OUT,">> $logfile");
		print OUT " --- Output limited to 10 lines. (There would be too much.) ---\n";
		close (OUT);
		system("cat -v $testfile | $iolimit >> $logfile 2>&1");
	    }
	    
	    if ( ! $status ) {	    # it exited zero.  A good sign
		# now see if it got the right output.
		$reffile = "$expdir/$testnum";
		if ( ! -f "$reffile" ) {
		    # create the reference file
		    $cl="( " . $reference{$cmd} . 
			" $args 2>&1 ) > $reffile";
		    system($cl);
		}
		$status=system("diff $diffargs $reffile $testfile > $difffile");
		
		if ( $status ) {# if different (and unexpected)
		    $failed = 1;		    
		    open  (OUT,">> $logfile");
		    print OUT "Diffs: ( < Reference > Testfile ):\n";
		    close (OUT);
		    if ( ! $quiet ) {
			system("cat -v $difffile >> $logfile");
		    } else {
			open  (OUT,">> $logfile");
			print OUT " --- Output limited to 10 lines. (There would be too much.) ---\n";
			close (OUT);
			system("cat -v $difffile | $iolimit >> $logfile 2>&1");
		    }
		}
	    } else {
		# program execution exited nonzero (failure)
		if ( ! $shouldfail ) {
		    $failed = 1;
		    open  (OUT,">> $logfile");
		    print OUT "Program exited with bad status: $status\n";
		    close (OUT);
		}
	    }
	    
	    unlink($testfile);
	    unlink($difffile);

	    if ( $chatter ) {
	    	open  (OUT,">> $logfile");
	    	print OUT "shouldfail is $shouldfail and failed is $failed\n";
	    	if ( $shouldfail ) {
	    		$failed = $failed?0:1;
	    		print OUT "\tNow, it's $failed\n";
	    	}
	    	close(OUT);
	    }
	}

	if ( $failed ) {
	    $errors ++;
	}
	printf("%3d -- ",$testnum++);
	$_ = $args;
	s/(\s)?$imagedir\//$1/;
	$args = $_;
#	printf($format,$name,$cmd,$args,$status?"FAILED":"ok");
	printf($format,$name,$failed?"FAILED.":"ok.",$cmd,$args);
#	printf($format,$status?"FAILED":"ok",$name,$cmd,$args);
#	last; 			# PLN
    }
    return $errors;
}

