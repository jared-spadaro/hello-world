#include "data.h"
#include "vector_math.h"
#include <math.h>

struct maybe_point sphere_intersection_point(struct ray r, struct sphere s)
{
   double A;
   double B;
   double C;
   double t1;
   double t2;
   double discriminant;
   
   struct maybe_point not_a_point = {{0},{0,0}};
   struct maybe_point a_point1 = {{1},{r.p + (r.dir * t1)}}; //scale vector, translate vector
   struct maybe_point a_point2 = {{1},{r.p + (r.dir * t2)}}; //scale vector, translate vector

   A = r.dir * r.dir;
   B = 2((r.p - s.center) * r.dir);
   C = ((r.p -s.center) * (r.p - s.center)) - (s.radius * s.radius);

   discriminant = (B*B) - (4*A*C);
   
   t1 = (-B + sqrt((B*B) - (4*A*C))) / (2*A);
   t2 = (-B - sqrt((B*B) - (4*A*C))) / (2*A);

   if (discriminant < 0)
   {
      return not_a_point;
   }
   
   else if (discriminant >= 0)
   {
      if (t1 < t2)
      {
         return a_point1;
      }
      else if (t2 < t1)
      {
         return a_point2;
      }
      else
      {
         return not_a_point;
      }
   }    
   

//find discriminant. if negative return 0
   } 
}



